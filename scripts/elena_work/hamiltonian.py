from  openfermion import FermionOperator as FO
import numpy

Vbc = [[.0250807169923074, -.0868144072950623, .0085583025756312, -.0453252197425094, -.0994068127537739,
        -.0806228772741335],
       [-.0457200481761811, .0099115160477145, .0139115378406957, -.0861511722789291, -.0260372216384797,
        -.0508725514072142]]

Eb = [[.1614803305373006, .5965506376046160, .4886895836185136, .3258340605965911, .3602436300555840,
           .4402214440260793],
          [.5965506376046160, 1.1229456340538546, .8529290249653549, .7141792453632360, .5956125332489218,
           .8892400572481333],
          [.4886895836185136, .8529290249653549, .5162948080439264, .5684505485341950, .4841907805435753,
           .7141818571126369],
          [.3258340605965911, .7141792453632360, .5684505485341950, .3375764688659696, .3043939386462531,
           .4806909888771593],
          [.3602436300555840, .5956125332489218, .4841907805435753, .3043939386462531, .0937845220196198,
           .3788994588642509],
          [.4402214440260793, .8892400572481333, .7141818571126369, .4806909888771593, .3788994588642509,
           .6362487049018987]]

if __name__ == "__main__":
    H = 0.294*FO('[0^ 0 1^ 1]')
    H += 0.294*FO('[2^ 2 3^ 3]')
    H += -0.6009694*(FO('[0^ 0]') + FO('[1^ 1]'))
    H += -0.5800571*(FO('[2^ 2]') + FO('[3^ 3]'))

    for f in range(2):
        for d in range(6):
            factor = Vbc[f][d]
            # TODO check
            term_even = FO('[{0}^ {1}] - [{1}^ {0}]'.format(2*f, 2*(2+d)))
            term_odd = FO('[{0}^ {1}] - [{1}^ {0}]'.format(2*f + 1, 2*(2+d) + 1))

            H += factor*(term_odd + term_even)

    for d1 in range(6):
        for d2 in range(6):
            factor = Eb[d1][d2]
            # TODO check
            term_even = FO('[{0}^ {1}] - [{1}^ {0}]'.format(2 * (d1+2), 2 * (d2+2)))
            term_odd = FO('[{0}^ {1}] - [{1}^ {0}]'.format(2 * (d1+2) + 1, 2 * (d2+2) + 1))

            H += factor*(term_odd + term_even)

    print(H)
    print(len(H.terms))

    print('catpuccino')
